#!/usr/bin/python3
"""
Define a Rectangle Class
"""


class Rectangle:
    """
   Rectangle  Class
    """
    number_of_instances = 0
    print_symbol = "#"
    """initialize"""
    def __init__(self, width=0, height=0):
        self.__width = width
        self.__height = height
        type(self).number_of_instances += 1

    @property
    def width(self):
        return self.__width """width method(getter)"""

    @width.setter   """sets width"""
    def width(self, value):
        if not isinstance(value, int):
            raise TypeError("width must be an integer")
        if value < 0:
            raise ValueError("width must be >=0")
        self.__width = value

    @property """height getter"""
    def height(self):
        return self.__height

    @height.setter """setting te height"""
    def height(self, value):
        if not isinstance(value, int):
            raise TypeError("height must be an integer")
        if value < 0:
            raise ValueError("height must be >=0")
        self.__height = value

    def area(self): """returning the area of the rectangle"""
        return (self.__width * self.__height)

    def perimeter(self): """returning 0 for perimeter"""
        if self.__width == 0 or self.__height == 0:
            return(0)
        else:
            return (self.__width + self.__width + self.height + self.height)

    def __str__(self): """string method to print #"""
        if self.__width == 0 or self.__height == 0:
            return("")
        else:
            rectangle = "#"
            for i in range(self.__height):
                for j in range(self.height - 1):
                    print(rectangle * self.__width)
                return(rectangle * self.width)

    def __repr__(self): """ repr method to return decreasing instances"""
        return("Rectangle{}, {}".format(self.width, self.height))

    def __del__(self): """ prints a message when a instance gets deleted"""
        type(self).number_of_instances -= 1
        print("Bye rectangle...")
